android {
    def globalConfiguration = rootProject.extensions.getByName("ext")
    namespace "com.msgkatz.ratesapp"
    buildToolsVersion "33.0.2"
    compileSdkVersion 33

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['../assets']
            jniLibs.srcDirs = ['libs']
        }

    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }
    defaultConfig {
        applicationId "com.msgkatz.ratesapp"

        minSdkVersion 21
        targetSdkVersion 33
        versionCode 20
        versionName "0.2.1"

        multiDexEnabled true

        manifestPlaceholders = [useCrashlytics: "false"]

        vectorDrawables.useSupportLibrary = true
    }
    signingConfigs {
        config_debug {
            //noinspection GroovyAssignabilityCheck
//            keyAlias globalConfiguration.getAt("CR_DEBUG_KEY_ALIAS")
//            //noinspection GroovyAssignabilityCheck
//            keyPassword globalConfiguration.getAt("CR_DEBUG_KEY_PASSWORD")
//
//            storeFile file(globalConfiguration.getAt("CR_RELEASE_KEY_PATH"))
//            //noinspection GroovyAssignabilityCheck
//            storePassword globalConfiguration.getAt("CR_STORE_PASSWORD")

        }
        config_release {
            //noinspection GroovyAssignabilityCheck
            keyAlias globalConfiguration.getAt("CR_RELEASE_KEY_ALIAS")
            //noinspection GroovyAssignabilityCheck
            keyPassword globalConfiguration.getAt("CR_RELEASE_KEY_PASSWORD")
            storeFile file(globalConfiguration.getAt("CR_RELEASE_KEY_PATH"))
            //noinspection GroovyAssignabilityCheck
            storePassword globalConfiguration.getAt("CR_STORE_PASSWORD")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            multiDexKeepFile file('multidex-config.txt')
            multiDexKeepProguard file('multidex-config.pro')
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config_release
            manifestPlaceholders.useCrashlytics = "true"

        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //signingConfig signingConfigs.config_debug
            firebaseCrashlytics {
                // If you don't need crash reporting for your debug build,
                // you can speed up your build by disabling mapping file uploading.
                mappingFileUploadEnabled false
            }
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}


configurations {
    sharedImpl.extendsFrom(implementation)
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
    doFirst {
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.matching { it.name.contains("merge") && it.name.contains("JniLibFolders") }.configureEach { packageTask ->
    packageTask.dependsOn 'copyAndroidNatives'
}

tasks.register('run', Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.msgkatz.ratesapp/com.msgkatz.ratesapp.AndroidLauncher'
}

eclipse.project.name = appName + "-android"
